defaults:

  - common_environment
  - _self_

# Environment Name
env_name:                 ['custom','HazardsEnv']
seed:                     0

robot_base:               'xmls/point.xml'
task:                     'goal'
observation_flatten:      True        # Flatten observation into a vector
observe_sensors:          True        # Observe all sensor data from simulator

# Rewards
reward_distance:          default     # Dense reward multiplied by the distance moved to the goal
reward_goal:              default     # Sparse reward for being inside the goal area

# World Spawn Limits
placements_extents:       default     # Placement limits (min X, min Y, max X, max Y)

# Sensor Observations
sensors_obs:              default
sensors_hinge_joints:     True        # Observe named joint position / velocity sensors
sensors_ball_joints:      True        # Observe named ball joint position / velocity sensors
sensors_angle_components: True        # Observe sin/cos theta instead of theta

#observe goal/box/...
observe_goal_dist:        False       # Observe the distance to the goal
observe_goal_comp:        False       # Observe a compass vector to the goal
observe_goal_lidar:       True        # Observe the goal with a lidar sensor
observe_box_comp:         False       # Observe the box with a compass
observe_box_lidar:        False       # Observe the box with a lidar
observe_circle:           False       # Observe the origin with a lidar
observe_remaining:        False       # Observe the fraction of steps remaining
observe_walls:            False       # Observe the walls with a lidar space
observe_hazards:          True        # Observe the vector from agent to hazards
observe_vases:            True        # Observe the vector from agent to vases
observe_pillars:          False       # Lidar observation of pillar object positions
observe_buttons:          False       # Lidar observation of button object positions
observe_gremlins:         False       # Gremlins are observed with lidar-like space
observe_vision:           False       # Observe vision from the robot

# Constraints
constrain_hazards:        True        # Constrain robot from being in hazardous areas
constrain_vases:          False       # Constrain robot from touching objects
constrain_pillars:        False       # Immovable obstacles in the environment
constrain_buttons:        False       # Penalize pressing incorrect buttons
constrain_gremlins:       False       # Moving objects that must be avoided

# Cost Discrete/Continuous. As for AdamBA, I guess continuous cost is more suitable.
constrain_indicator:      False       # If true, all costs are either 1 or 0 for a given step. If false, then we get dense cost.

# Lidar Setting
lidar_max_dist:           null        # Maximum distance for lidar sensitivity (if None, exponential distance)
lidar_num_bins:           16

# Hazard Config
hazards_num:              1           # Number of Hazards
hazards_size:             0.15        # Size of Hazard (0.2)
hazards_keepout:          default     # Min Spawn Distance to Hazard
hazards_cost:             default     # Cost (per step) for violating the constraint

# Vases Config
vases_num:                0           # Number of vases in the world
vases_contact_cost:       default     # Cost (per step) for being in contact with a vase
vases_displace_cost:      default     # Cost (per step) per meter of displacement for a vase
vases_velocity_cost:      default     # Cost (per step) per m/s of velocity for a vase

# Frameskip is the number of physics simulation steps per environment step
# Frameskip is sampled as a binomial distribution
# For deterministic steps, set frameskip_binom_p = 1.0 (always take max frameskip)
frameskip_binom_n:        10          # Number of draws trials in binomial distribution (max frameskip)
frameskip_binom_p:        1.0         # Probability of trial return (controls distribution)
